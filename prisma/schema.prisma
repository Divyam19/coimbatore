// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod" 
  relationModel         = true 
  modelCase             = "camelCase" 
  modelSuffix           = "Schema" 
  useDecimalJs          = true 
  prismaJsonNullability = true 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum Role {
  SELLER
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
}

model Seller{
  id            String    @id @default(cuid())
  name          String
  products      Product[]
  country       String
  state         String
  city          String
  email         String    @unique
  test          String?
  mobno         String?
}

model Product{
  id            String    @id @default(cuid())
  name          String
  mobno         String    
  city          String?
  state         String?
  country       String?   
  output        String?
  type          String
  description   String?
  sellerId      String
  price         Int
  email         String
  seller        Seller    @relation(fields: [sellerId],references: [id])
}
